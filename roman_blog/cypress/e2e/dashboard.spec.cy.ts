
describe("test the crud functions of the dashboard", ()=>{
    beforeEach(()=>{
        cy.visit('/dashboard')
    })
    it("test the uebermich", ()=>{
        cy.request('http://localhost:3000/api/ueberMich').then((response)=>{
            const myPerson = JSON.parse(response.body)
            expect(myPerson).to.have.length(1)
        })
        cy.get("#myPerson")
        .type("Das is ein Testlauf f端r das testen mit Cypress")
        .should('have.value', 'Das is ein Testlauf f端r das testen mit Cypress')
        cy.get('#ueberMichSend')
        .click({force:true})
        .should('be.disabled')
        cy.request('http://localhost:3000/api/ueberMich').then((response)=>{
            const myPerson = JSON.parse(response.body)
            expect(myPerson).to.have.length(2)
        })
    })
    it("test the edit in uebermich", ()=>{
        cy.request('http://localhost:3000/api/ueberMich').then((response)=>{
            const myPerson = JSON.parse(response.body)
            expect(myPerson).to.have.length(2)
                cy.get("body > div > div.page_container__WJamO > div.ueberMich_container__zKS_h > div.ueberMich_ueberMichWrapper___9eiz > div:nth-child(3)")
                .find('#editUeberMich')
                .click()
                .wait(10000)
                cy.get('textarea')
                .should('be.visible')
                .clear()
                .type("Das ist ein Testlauf f端r das Testen mit Cypress")
                .should('have.value', "Das ist ein Testlauf f端r das Testen mit Cypress")
                cy.get("body > div > div.page_container__WJamO > div.ueberMich_container__zKS_h > div.ueberMich_formWrapper__tP0Dx > div.ueberMich_formWrapper__tP0Dx > div > div:nth-child(3) > form > button")
                .should('be.visible')
                .and('be.enabled')
                .click()
        })
    })
    it("Test the deleteFunction", ()=>{
        cy.get("body > div > div.page_container__WJamO > div.ueberMich_container__zKS_h > div.ueberMich_ueberMichWrapper___9eiz > div:nth-child(3)")
                .find('#deleteUeberMich')
                .click()
                .wait(5000)
                cy.request('http://localhost:3000/api/ueberMich').then((response)=>{
                    const myPerson = JSON.parse(response.body)
                    expect(myPerson).to.have.length(1)
                })
    })
    it("Test the blogPosts are there", ()=>{
        cy.request('http://localhost:3000/api/blogPosts').then((response)=>{
            const blogPosts = JSON.parse(response.body)
            expect(blogPosts).to.have.length(11)
        })
        cy.wait(10000)
        cy.get('input[id="theme"]')
        .type("TestTHema Cypress", {delay:500})
        .should('have.value', "TestTHema Cypress")
        cy.get('input[id="author"]')
        .type("TestAutor", {delay:500})
        .should('have.value', "TestAutor")
        cy.get('input[id="description"]')
        .type("TestDescription", {delay:500})
        .should('have.value', "TestDescription")
        cy.get('textarea[id="content"]')
        .type("Lorem Ipsum ad dolores", {delay:500})
        .should('have.value', "Lorem Ipsum ad dolores")
        cy.get('input[type="file"]').selectFile('cypress/fixtures/placeholder2.jpg');
 
        cy.get('body > div > div.page_container__WJamO > div.blogPost_container__4N_w2 > div.blogPost_formWrapper__2sHu_ > div.blogPost_formWrapper__2sHu_ > form > button')  
        .click({timeout: 40000})
        cy.wait(10000)
        cy.request('/api/blogPosts').then((response)=>{
            const blogPosts = JSON.parse(response.body)
            expect(blogPosts).to.have.length(12)
        })
    })
    it('test the blogPost Update', ()=>{
        cy.wait(10000)
        cy.request('/api/blogPosts').then((response)=>{
            const blogposts = JSON.parse(response.body)
            cy.wrap(blogposts)
                cy.get('[data-testid = "editblogposts"]').eq(9)
                .should('be.visible')
                .click({timeout:10000})
                cy.get('[data-testid="editBlogpostForm"]')
                .should('be.visible')
                cy.get('input[id="theme"]')
                .should('have.value', "TestTHema Cypress")
                .clear()
                .type('Testthema Cypress')
                .should('have.value', 'Testthema Cypress')
                cy.get('input[id="author"]')
                .should('have.value', "TestAutor")
                cy.get('input[id="description"]')
                .should('have.value', "TestDescription")
                cy.get('textarea[id="content"]')
                .should('have.value', "Lorem Ipsum ad dolores")
                cy.get('input[type="file"]').selectFile('cypress/fixtures/placeholder1.jpg')
                cy.get('[data-testid="editBlogpostBtn"]')
                .should('be.visible')
                .should('be.enabled')
                .click()
                .should('be.disabled')
                cy.get('[data-testid="editBlogpostForm"]')
                .should('not.exist')
        })
    })
    it("test the delete", ()=>{
        cy.get('[data-testid="deleteblogposts"]').eq(9)
        .click({timeout:10000})
        cy.request('/api/blogPosts').then((response)=>{
            const blogPosts = JSON.parse(response.body)
            expect(blogPosts).to.have.length(10)
        })
    })
    it('test forumthemes upload', ()=>{
        cy.request('/api/forumThemes').then((response)=>{
            const forumThemes = JSON.parse(response.body)
            expect(forumThemes).to.have.length(3)
        })
        cy.wait(10000)
        cy.get('input[id="theme"]')
        .type("Testtheme")
        .should('have.value', 'Testtheme')
        cy.get('input[id="content"]')
        .type("Testcontent")
        .should('have.value', 'Testcontent')
        cy.get('[data-testid="forumthemesBtn"]')
        .click({timeout:15000})
        cy.request('/api/forumThemes').then((response)=>{
            const forumThemes = JSON.parse(response.body)
            expect(forumThemes).to.have.length(4)
        })
    })
    it('test the forumThemesUpdate', ()=>{
        cy.wait(10000)
        cy.getTestid('editForumThemes').eq(3)
        .click({timeout:10000})
        cy.getTestid('editForumThemesForm')
        .should('be.visible')
        cy.get('input[id="theme"]')
        .should('have.value',"Testthema")
        .clear()
        .type("TestThema")
        .should('have.value',"TestThema")
        cy.getTestid('editForumBtn')
        .click()
    })
    it('test the delete',()=>{
        cy.getTestid('deleteForumThemes').eq(3)
        .click({timeout:10000})
        cy.request('/api/forumThemes').then((response)=>{
            const forumThemes = JSON.parse(response.body)
            expect(forumThemes).to.have.length(3)
        })
    })
    it("test the upload of bibliothek", ()=>{
        cy.request('/api/bibliothek').then((response)=>{
            const bibliothek = JSON.parse(response.body)
            expect(bibliothek).to.have.length(1)
        })
        cy.wait(90000)
        cy.getTestid('editTheBibliothek').eq(1)
        .click({timeout:100000})
        cy.getTestid('editBibliothekForm')
        .should('be.visible')
        cy.wait(80000)
        cy.getTestid('add')
        .click({timeout:10000})
        cy.getTestid('ressort').eq(18)
        .should('be.visible')
        .type('CSS')
        cy.getTestid('file').eq(18)
        .should('be.visible')
        .type('https://www.youtube.com/watch?v=u31qwQUeGuM')
        cy.getTestid('content').eq(18)
        .should('be.visible')
        .type("Placeholder CSS Test")
        cy.getTestid('submit')
        .click({timeout:80000})
        cy.getTestid('fieldArrayLength')
        .should('have.value', 19)
    })
    it("test the delete", ()=>{
        cy.wait(90000)
        cy.getTestid('editTheBibliothek').eq(1)
        .click({timeout:120000})
        cy.getTestid('editBibliothekForm')
        .should('be.visible')
        cy.wait(80000)
        cy.getTestid("remove").eq(9)
        .click({timeout:80000})
        cy.request('/api/bibliothek').then((response)=>{
            const bibliothek = JSON.parse(response.body)
            cy.wrap(bibliothek)
            .each((bibliothekItem)=>{
                //@ts-ignore
                const length = bibliothekItem.videos
                expect(length).to.have.length(18)
            })
        })
    })
})